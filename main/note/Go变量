### Go变量

我们知道Go的变量初始化有两种形式：
1. var  变量名 类型
2. 变量名 := 初始值

使用操作符(:=)可以非常高效地创建一个变量，称之为**初始化声明**

> 操作符(:=)是使用变量的首选形式，但是它**只能被用在函数体内，而不可以用于全局变量的声明与赋值**

在Go中，交换两个变量的值，可以简单的使用
a, b = b, a // 省略交换函数的必要


### Go中的类型Why放在后面
同一类型的多个变量可以声明在同一行
```go
var a ,b ,c  int // 这是将类型写在标识符后面的一个重要原因
```

### Go 的init函数

变量除了可以在全局声明中初始化，也可以在init函数中初始化。
> init函数是非常特殊的函数，它不能够被人为调用，而是在每个包完成初始化后自动执行，并且执行优先级
比main函数高。每个源文件都只能包含一个init函数。初始化总是以单线程执行，并且按照包的依赖
关系顺序执行。

### Go 的变量命名规则
> “对变量、常量、函数、自定义类型进行命名，通常优先选用有实际含义，易于阅读和理解的字母或单词组合。”

命名建议：
1. 以字母或下划线开始；
2. 区分大小写；
3. 使用驼峰拼写格式
4. 专有名词通常全部大写
5. 局部变量优先使用短名
6. 不要使用保留关键字
7. 不建议使用与预定义变量，类型，内置函数相同的名字。

**符号名字首字母大小写决定了其作用域。首字母大写的为导出成员，可以在包外被引用；而小写则只能在包内使用**
  
   


In Summary:
1. init() 不能被人为地调用；
2. 优先级比main() 高；
3. 每个源文件只能有一个init函数，初始化时是以单线程执行。
4. 编译器将未使用的局部变量当作错误。（有助于培养良好的编码习惯...）
5. 可以使用空标识符("_")来临时规避编译器对未使用变量和导入包的错误检查。但要注意，它是预置成员，不能重复定义。















